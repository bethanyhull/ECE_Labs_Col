
bin/adc_project.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000438 	.word	0x20000438
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000828 	.word	0x08000828

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08000828 	.word	0x08000828
 80001d8:	2000043c 	.word	0x2000043c
 80001dc:	20000438 	.word	0x20000438
 80001e0:	00000000 	.word	0x00000000

080001e4 <main>:

// gpio_d_init() prototype declaration goes here!
void gpio_d_init(void);

int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b08f      	sub	sp, #60	; 0x3c
 80001e8:	af00      	add	r7, sp, #0
  adc_init();               // Initialize the ADC hardware
 80001ea:	f000 f8bd 	bl	8000368 <adc_init>
  seg7_init ();             // Initialize the 7 segment display
 80001ee:	f000 f9a9 	bl	8000544 <seg7_init>
  gpio_d_init();            // Initialize the GPIO Port D as outputs (output(15-0) = off)
 80001f2:	f000 f93f 	bl	8000474 <gpio_d_init>
  unsigned char segData[16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x2, 0x78, 0x00, 0x18, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0e};                
 80001f6:	4b56      	ldr	r3, [pc, #344]	; (8000350 <main+0x16c>)
 80001f8:	1d3c      	adds	r4, r7, #4
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	6859      	ldr	r1, [r3, #4]
 80001fe:	689a      	ldr	r2, [r3, #8]
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                // set up array of 7 segment data to display decimal digits 
  while(1) {
    uint32_t q = 0;             // Initialize any variables needed
 8000204:	2300      	movs	r3, #0
 8000206:	637b      	str	r3, [r7, #52]	; 0x34
    
    adc_start();                // Start ADC
 8000208:	f000 f8f4 	bl	80003f4 <adc_start>
    
    while (!adc_done()) {
 800020c:	e002      	b.n	8000214 <main+0x30>
      q = q +1;
 800020e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000210:	3301      	adds	r3, #1
 8000212:	637b      	str	r3, [r7, #52]	; 0x34
  while(1) {
    uint32_t q = 0;             // Initialize any variables needed
    
    adc_start();                // Start ADC
    
    while (!adc_done()) {
 8000214:	f000 f8fe 	bl	8000414 <adc_done>
 8000218:	4603      	mov	r3, r0
 800021a:	f083 0301 	eor.w	r3, r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1f4      	bne.n	800020e <main+0x2a>
      q = q +1;
                                // Wait in a tight loop for ADC conversion to finish
    }
    uint32_t val = adc_get();   // ADC is done; get ADC value (12 bits right justified)
 8000224:	f000 f90a 	bl	800043c <adc_get>
 8000228:	6338      	str	r0, [r7, #48]	; 0x30
                                // Use ADC value (0 - ???) to write 7 seg display
                                
                                // call seg7_put() for each digit in 7 segment display
                          
                                
  seg7_put (0x7, 0x00);  // HEX7 is always blank
 800022a:	2007      	movs	r0, #7
 800022c:	2100      	movs	r1, #0
 800022e:	f000 f9b9 	bl	80005a4 <seg7_put>

  int dig6 = (val / 1366);
 8000232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000234:	4a47      	ldr	r2, [pc, #284]	; (8000354 <main+0x170>)
 8000236:	fba2 2303 	umull	r2, r3, r2, r3
 800023a:	089b      	lsrs	r3, r3, #2
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  seg7_put (0x6, segData[dig6]);  // HEX6 is volts
 800023e:	1d3a      	adds	r2, r7, #4
 8000240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000242:	4413      	add	r3, r2
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2006      	movs	r0, #6
 8000248:	4619      	mov	r1, r3
 800024a:	f000 f9ab 	bl	80005a4 <seg7_put>

int dig5 = ((val / 137) % 10);
 800024e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000250:	4a41      	ldr	r2, [pc, #260]	; (8000358 <main+0x174>)
 8000252:	fba2 2303 	umull	r2, r3, r2, r3
 8000256:	0899      	lsrs	r1, r3, #2
 8000258:	4b40      	ldr	r3, [pc, #256]	; (800035c <main+0x178>)
 800025a:	fba3 2301 	umull	r2, r3, r3, r1
 800025e:	08da      	lsrs	r2, r3, #3
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	1aca      	subs	r2, r1, r3
 800026a:	62ba      	str	r2, [r7, #40]	; 0x28
  seg7_put (0x5, segData[dig5]);  // HEX5 is tenths of volts
 800026c:	1d3a      	adds	r2, r7, #4
 800026e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000270:	4413      	add	r3, r2
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2005      	movs	r0, #5
 8000276:	4619      	mov	r1, r3
 8000278:	f000 f994 	bl	80005a4 <seg7_put>

int dig4 = (((val * 100) / 1366) % 10);
 800027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800027e:	2264      	movs	r2, #100	; 0x64
 8000280:	fb02 f303 	mul.w	r3, r2, r3
 8000284:	4a33      	ldr	r2, [pc, #204]	; (8000354 <main+0x170>)
 8000286:	fba2 2303 	umull	r2, r3, r2, r3
 800028a:	0899      	lsrs	r1, r3, #2
 800028c:	4b33      	ldr	r3, [pc, #204]	; (800035c <main+0x178>)
 800028e:	fba3 2301 	umull	r2, r3, r3, r1
 8000292:	08da      	lsrs	r2, r3, #3
 8000294:	4613      	mov	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	1aca      	subs	r2, r1, r3
 800029e:	627a      	str	r2, [r7, #36]	; 0x24
  seg7_put (0x4, segData[dig4]); // HEX4 is hundredths of volts
 80002a0:	1d3a      	adds	r2, r7, #4
 80002a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a4:	4413      	add	r3, r2
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2004      	movs	r0, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	f000 f97a 	bl	80005a4 <seg7_put>

  int dig3 = (val / 1000);
 80002b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002b2:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <main+0x17c>)
 80002b4:	fba2 2303 	umull	r2, r3, r2, r3
 80002b8:	099b      	lsrs	r3, r3, #6
 80002ba:	623b      	str	r3, [r7, #32]
  seg7_put (0x3, segData[dig3]);  // HEX3 is thousands digit of decimal ADC count                             
 80002bc:	1d3a      	adds	r2, r7, #4
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	4413      	add	r3, r2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2003      	movs	r0, #3
 80002c6:	4619      	mov	r1, r3
 80002c8:	f000 f96c 	bl	80005a4 <seg7_put>
                                
  int dig2 = ((val / 100) % 10);
 80002cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002ce:	4a25      	ldr	r2, [pc, #148]	; (8000364 <main+0x180>)
 80002d0:	fba2 2303 	umull	r2, r3, r2, r3
 80002d4:	0959      	lsrs	r1, r3, #5
 80002d6:	4b21      	ldr	r3, [pc, #132]	; (800035c <main+0x178>)
 80002d8:	fba3 2301 	umull	r2, r3, r3, r1
 80002dc:	08da      	lsrs	r2, r3, #3
 80002de:	4613      	mov	r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	4413      	add	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	1aca      	subs	r2, r1, r3
 80002e8:	61fa      	str	r2, [r7, #28]
  seg7_put (0x2, segData[dig2]); // HEX2 is hundreds digit of decimal ADC count
 80002ea:	1d3a      	adds	r2, r7, #4
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2002      	movs	r0, #2
 80002f4:	4619      	mov	r1, r3
 80002f6:	f000 f955 	bl	80005a4 <seg7_put>
                                
  int dig1 = ((val / 10) % 10);
 80002fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <main+0x178>)
 80002fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000302:	08d9      	lsrs	r1, r3, #3
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <main+0x178>)
 8000306:	fba3 2301 	umull	r2, r3, r3, r1
 800030a:	08da      	lsrs	r2, r3, #3
 800030c:	4613      	mov	r3, r2
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	4413      	add	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	1aca      	subs	r2, r1, r3
 8000316:	61ba      	str	r2, [r7, #24]
  seg7_put (0x1, segData[dig1]); // HEX1 is tens digit of decimal ADC count                              
 8000318:	1d3a      	adds	r2, r7, #4
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	4413      	add	r3, r2
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2001      	movs	r0, #1
 8000322:	4619      	mov	r1, r3
 8000324:	f000 f93e 	bl	80005a4 <seg7_put>
                                
  int dig0 = (val % 10); 
 8000328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <main+0x178>)
 800032c:	fba3 2301 	umull	r2, r3, r3, r1
 8000330:	08da      	lsrs	r2, r3, #3
 8000332:	4613      	mov	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	4413      	add	r3, r2
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	1aca      	subs	r2, r1, r3
 800033c:	617a      	str	r2, [r7, #20]
  seg7_put (0x0, segData[dig0]); // HEX0 is ones digit of decimal ADC count                            
 800033e:	1d3a      	adds	r2, r7, #4
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2000      	movs	r0, #0
 8000348:	4619      	mov	r1, r3
 800034a:	f000 f92b 	bl	80005a4 <seg7_put>
  }
 800034e:	e759      	b.n	8000204 <main+0x20>
 8000350:	08000810 	.word	0x08000810
 8000354:	00bfe803 	.word	0x00bfe803
 8000358:	077975b9 	.word	0x077975b9
 800035c:	cccccccd 	.word	0xcccccccd
 8000360:	10624dd3 	.word	0x10624dd3
 8000364:	51eb851f 	.word	0x51eb851f

08000368 <adc_init>:
struct RCC  * RCC  = (struct RCC*)RCC_BASE;
struct GPIO *GPIOA = (struct GPIO*)GPIOA_BASE;
struct ADC  *ADC1  = (struct ADC*)ADC1_BASE;

void adc_init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  // enable GPIOA0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <adc_init+0x80>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <adc_init+0x80>)
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000376:	f042 0201 	orr.w	r2, r2, #1
 800037a:	631a      	str	r2, [r3, #48]	; 0x30
  GPIOA->MODER |= ((uint32_t)(GPIO_MODE_ANALOG << ( 2 * 0))); // 0x3 is analog mode
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <adc_init+0x84>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <adc_init+0x84>)
 8000382:	6812      	ldr	r2, [r2, #0]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	f042 0203 	orr.w	r2, r2, #3
 800038a:	601a      	str	r2, [r3, #0]
  
 // enable APB2 for ADC1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <adc_init+0x80>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <adc_init+0x80>)
 8000392:	6812      	ldr	r2, [r2, #0]
 8000394:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800039a:	645a      	str	r2, [r3, #68]	; 0x44

  ADC1->CR1 = 0; // defaults are fine for now
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <adc_init+0x88>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  ADC1->CR2 = 0; // defaults are fine for now
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <adc_init+0x88>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  
  // Configure Channel/Sequence
  // SQR1[23:20] set sequence length -- 0 means one conversion 
  ADC1->SQR1 = 0;
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <adc_init+0x88>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2200      	movs	r2, #0
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
  // NOTE: set ~10us to read 
  // ADCCLK is F_pclk2 (84MHz) / prescaler
  // default prescaler = 2, so default ADCCLK is 42MHz
  // 42MHz -> 23.9ns cycle, so we need 480 cycle sampling time
  // Set Sample Time (480 Cycles)
  ADC1->SMPR1 = 7<<18;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <adc_init+0x88>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80003bc:	60da      	str	r2, [r3, #12]

  // set the channel
  ADC1->SQR2 = 0;
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <adc_init+0x88>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2200      	movs	r2, #0
 80003c4:	631a      	str	r2, [r3, #48]	; 0x30
  ADC1->SQR3 = 0; // choose ADC IN0
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <adc_init+0x88>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2200      	movs	r2, #0
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34

  // Enable ADC
  ADC1->CR2 |= ADC_CR2_ADON;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <adc_init+0x88>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <adc_init+0x88>)
 80003d4:	6812      	ldr	r2, [r2, #0]
 80003d6:	6892      	ldr	r2, [r2, #8]
 80003d8:	f042 0201 	orr.w	r2, r2, #1
 80003dc:	609a      	str	r2, [r3, #8]
}
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000000 	.word	0x20000000
 80003ec:	20000004 	.word	0x20000004
 80003f0:	20000008 	.word	0x20000008

080003f4 <adc_start>:

void adc_start(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  // Start Regular Channel Conversion
  ADC1->CR2 |= ADC_CR2_SWSTART;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <adc_start+0x1c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <adc_start+0x1c>)
 80003fe:	6812      	ldr	r2, [r2, #0]
 8000400:	6892      	ldr	r2, [r2, #8]
 8000402:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000406:	609a      	str	r2, [r3, #8]
}
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	20000008 	.word	0x20000008

08000414 <adc_done>:

bool adc_done(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  // This bit is SET by hardware once the conversion is complete
  // it is CLEARED by software OR by reading the ADC_DR register
  return (ADC1->SR & ADC_SR_EOC);
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <adc_done+0x24>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	2b00      	cmp	r3, #0
 8000424:	bf14      	ite	ne
 8000426:	2301      	movne	r3, #1
 8000428:	2300      	moveq	r3, #0
 800042a:	b2db      	uxtb	r3, r3
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000008 	.word	0x20000008

0800043c <adc_get>:

uint32_t adc_get(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  // this clears the ADC_SR_EOC bit
  return ADC1->DR;
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <adc_get+0x14>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000446:	4618      	mov	r0, r3
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	20000008 	.word	0x20000008

08000454 <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 8000454:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 8000458:	4298      	cmp	r0, r3
  bgt skip_enable
 800045a:	dc08      	bgt.n	800046e <skip_enable>
    
    ldr r3,=RCC_BASE
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 800045e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 8000460:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 8000464:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 8000468:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 800046c:	6319      	str	r1, [r3, #48]	; 0x30

0800046e <skip_enable>:

  skip_enable:

  bx lr
 800046e:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 8000470:	40023800 	.word	0x40023800

08000474 <gpio_d_init>:
SET_TARGET

.text             

FUNCTION gpio_d_init,global			// initialize all 16 bits of Port D to outputs
  push {lr}
 8000474:	b500      	push	{lr}

  mov r0,#3					// send 3 as argument to rcc_gpio_enable function
 8000476:	f04f 0003 	mov.w	r0, #3
  bl rcc_gpio_enable				// call rcc_gpio_enable
 800047a:	f7ff ffeb 	bl	8000454 <rcc_gpio_enable>
	
  ldr r3,=#GPIOD_BASE				// load r3 with base address of GPIO PORT D
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <gpio_d_init+0x20>)

  ldr r2,=#0x00000000				// load 0 into r2
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <gpio_d_init+0x24>)
  str r2,[r3,#GPIO_PUPDR]			// write 0 to GPIO Port D PUPD register
 8000482:	60da      	str	r2, [r3, #12]
  str r2,[r3,#GPIO_OTYPER]			// write 0 to GPIO Port D TYPEregister
 8000484:	605a      	str	r2, [r3, #4]
  str r2,[r3,#GPIO_ODR]				// write 0 to GPIO Port D output data register
 8000486:	615a      	str	r2, [r3, #20]

  ldr r2,=#0x55555555				// set all 16 bits of port D to outputs
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <gpio_d_init+0x28>)
  str r2,[r3,#GPIO_MODER]	
 800048a:	601a      	str	r2, [r3, #0]

  ldr r2,=#0xffffffff				// write 0xffffffff to Port D register
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <gpio_d_init+0x2c>)

  pop {lr}
 800048e:	f85d eb04 	ldr.w	lr, [sp], #4

  bx lr
 8000492:	4770      	bx	lr
  push {lr}

  mov r0,#3					// send 3 as argument to rcc_gpio_enable function
  bl rcc_gpio_enable				// call rcc_gpio_enable
	
  ldr r3,=#GPIOD_BASE				// load r3 with base address of GPIO PORT D
 8000494:	40020c00 	.word	0x40020c00

  ldr r2,=#0x00000000				// load 0 into r2
 8000498:	00000000 	.word	0x00000000
  str r2,[r3,#GPIO_PUPDR]			// write 0 to GPIO Port D PUPD register
  str r2,[r3,#GPIO_OTYPER]			// write 0 to GPIO Port D TYPEregister
  str r2,[r3,#GPIO_ODR]				// write 0 to GPIO Port D output data register

  ldr r2,=#0x55555555				// set all 16 bits of port D to outputs
 800049c:	55555555 	.word	0x55555555
  str r2,[r3,#GPIO_MODER]	

  ldr r2,=#0xffffffff				// write 0xffffffff to Port D register
 80004a0:	ffffffff 	.word	0xffffffff

080004a4 <gpio_d_put>:
    
ENDFUNC gpio_d_init

FUNCTION gpio_d_put,global			// put a value out to the 16 bits of Port D outputs
  
  push {lr}
 80004a4:	b500      	push	{lr}

  ldr r3,=#GPIOD_BASE				// load r3 with base address of GPIO Port D
 80004a6:	4b02      	ldr	r3, [pc, #8]	; (80004b0 <gpio_d_put+0xc>)

  str r0,[r3,#GPIO_ODR]				// write to (function argument) to GPIO Port D output
 80004a8:	6158      	str	r0, [r3, #20]

  pop {lr}
 80004aa:	f85d eb04 	ldr.w	lr, [sp], #4

  bx lr
 80004ae:	4770      	bx	lr

FUNCTION gpio_d_put,global			// put a value out to the 16 bits of Port D outputs
  
  push {lr}

  ldr r3,=#GPIOD_BASE				// load r3 with base address of GPIO Port D
 80004b0:	40020c00 	.word	0x40020c00

080004b4 <gpio_d_get_current>:
  bx lr

ENDFUNC gpio_d_put

FUNCTION gpio_d_get_current,global	// get the current state of the 16 port D outputs
  push {lr}
 80004b4:	b500      	push	{lr}

  ldr r3,=#GPIOD_BASE				// load r3 with the base address of GPIO Port D
 80004b6:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <gpio_d_get_current+0xc>)

  ldr r0,[r3,#GPIO_ODR]				// load r0 with GPIO Port D output data register
 80004b8:	6958      	ldr	r0, [r3, #20]

  pop {lr}
 80004ba:	f85d eb04 	ldr.w	lr, [sp], #4

  bx lr
 80004be:	4770      	bx	lr
ENDFUNC gpio_d_put

FUNCTION gpio_d_get_current,global	// get the current state of the 16 port D outputs
  push {lr}

  ldr r3,=#GPIOD_BASE				// load r3 with the base address of GPIO Port D
 80004c0:	40020c00 	.word	0x40020c00

080004c4 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
 80004c6:	bf00      	nop

080004c8 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80004c8:	4915      	ldr	r1, [pc, #84]	; (8000520 <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 80004ca:	4a16      	ldr	r2, [pc, #88]	; (8000524 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <bloop+0x46>)

080004ce <loop_data>:

    loop_data:
      cmp	r2, r3
 80004ce:	429a      	cmp	r2, r3
      ittt	lt
 80004d0:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 80004d2:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 80004d6:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 80004da:	e7f8      	blt.n	80004ce <loop_data>
      
    movs    r0, #0
 80004dc:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 80004de:	4913      	ldr	r1, [pc, #76]	; (800052c <bloop+0x4a>)
    ldr     r2, =__bss_end__
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <bloop+0x4e>)

080004e2 <bloop>:

    bloop:
      cmp     r1, r2
 80004e2:	4291      	cmp	r1, r2
      itt     lo
 80004e4:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 80004e6:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 80004ea:	e7fa      	bcc.n	80004e2 <bloop>
    
    bl __libc_init_array
 80004ec:	f000 f88a 	bl	8000604 <__libc_init_array>

    ldr	r0, .Lfini
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <bloop+0x3a>)
    bl	atexit
 80004f2:	f000 f871 	bl	80005d8 <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <bloop+0x52>)
    cmp	r0,#0
 80004f8:	2800      	cmp	r0, #0
    it	ne
 80004fa:	bf18      	it	ne
    blxne	r0
 80004fc:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <bloop+0x5a>)
    str   r2,[r3]
 8000502:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000506:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 8000508:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 800050c:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 8000510:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 8000512:	f7ff fe67 	bl	80001e4 <main>
	
    bl  exit
 8000516:	f000 f865 	bl	80005e4 <exit>
	
    bx  lr
 800051a:	4770      	bx	lr
 800051c:	08000835 	.word	0x08000835
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000520:	0800084c 	.word	0x0800084c
    ldr	r2, =__data_start__	// to start
 8000524:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 8000528:	20000438 	.word	0x20000438
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 800052c:	20000438 	.word	0x20000438
    ldr     r2, =__bss_end__
 8000530:	20000454 	.word	0x20000454

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 8000534:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000538:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 800053c:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000540:	40023800 	.word	0x40023800

08000544 <seg7_init>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <seg7_init_loop_end+0x6>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4911      	ldr	r1, [pc, #68]	; (8000590 <seg7_init_loop_end+0xa>)
 800054c:	f361 0213 	bfi	r2, r1, #0, #20
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	490f      	ldr	r1, [pc, #60]	; (8000594 <seg7_init_loop_end+0xe>)
 8000556:	f361 0209 	bfi	r2, r1, #0, #10
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <seg7_init_loop_end+0x12>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	490e      	ldr	r1, [pc, #56]	; (800059c <seg7_init_loop_end+0x16>)
 8000562:	f361 0201 	bfi	r2, r1, #0, #2
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	f04f 0400 	mov.w	r4, #0
 800056c:	f04f 0508 	mov.w	r5, #8
 8000570:	4e0b      	ldr	r6, [pc, #44]	; (80005a0 <seg7_init_loop_end+0x1a>)

08000572 <seg7_init_loop>:
 8000572:	b145      	cbz	r5, 8000586 <seg7_init_loop_end>
 8000574:	4620      	mov	r0, r4
 8000576:	4631      	mov	r1, r6
 8000578:	f000 f814 	bl	80005a4 <seg7_put>
 800057c:	f104 0401 	add.w	r4, r4, #1
 8000580:	f1a5 0501 	sub.w	r5, r5, #1
 8000584:	e7f5      	b.n	8000572 <seg7_init_loop>

08000586 <seg7_init_loop_end>:
 8000586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000
 8000590:	00055555 	.word	0x00055555
 8000594:	000003ff 	.word	0x000003ff
 8000598:	40020400 	.word	0x40020400
 800059c:	00000001 	.word	0x00000001
 80005a0:	0000007f 	.word	0x0000007f

080005a4 <seg7_put>:
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	4f0a      	ldr	r7, [pc, #40]	; (80005d0 <seg7_put+0x2c>)
 80005a8:	697c      	ldr	r4, [r7, #20]
 80005aa:	f360 0402 	bfi	r4, r0, #0, #3
 80005ae:	f361 04c9 	bfi	r4, r1, #3, #7
 80005b2:	617c      	str	r4, [r7, #20]
 80005b4:	4f07      	ldr	r7, [pc, #28]	; (80005d4 <seg7_put+0x30>)
 80005b6:	f04f 0401 	mov.w	r4, #1
 80005ba:	61bc      	str	r4, [r7, #24]
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	ea4f 4404 	mov.w	r4, r4, lsl #16
 80005c8:	61bc      	str	r4, [r7, #24]
 80005ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40020400 	.word	0x40020400

080005d8 <atexit>:
 80005d8:	4601      	mov	r1, r0
 80005da:	2000      	movs	r0, #0
 80005dc:	4602      	mov	r2, r0
 80005de:	4603      	mov	r3, r0
 80005e0:	f000 b838 	b.w	8000654 <__register_exitproc>

080005e4 <exit>:
 80005e4:	b508      	push	{r3, lr}
 80005e6:	2100      	movs	r1, #0
 80005e8:	4604      	mov	r4, r0
 80005ea:	f000 f88f 	bl	800070c <__call_exitprocs>
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <exit+0x1c>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80005f4:	b103      	cbz	r3, 80005f8 <exit+0x14>
 80005f6:	4798      	blx	r3
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 f907 	bl	800080c <_exit>
 80005fe:	bf00      	nop
 8000600:	08000824 	.word	0x08000824

08000604 <__libc_init_array>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	4e0f      	ldr	r6, [pc, #60]	; (8000644 <__libc_init_array+0x40>)
 8000608:	4d0f      	ldr	r5, [pc, #60]	; (8000648 <__libc_init_array+0x44>)
 800060a:	1b76      	subs	r6, r6, r5
 800060c:	10b6      	asrs	r6, r6, #2
 800060e:	bf18      	it	ne
 8000610:	2400      	movne	r4, #0
 8000612:	d005      	beq.n	8000620 <__libc_init_array+0x1c>
 8000614:	3401      	adds	r4, #1
 8000616:	f855 3b04 	ldr.w	r3, [r5], #4
 800061a:	4798      	blx	r3
 800061c:	42a6      	cmp	r6, r4
 800061e:	d1f9      	bne.n	8000614 <__libc_init_array+0x10>
 8000620:	4e0a      	ldr	r6, [pc, #40]	; (800064c <__libc_init_array+0x48>)
 8000622:	4d0b      	ldr	r5, [pc, #44]	; (8000650 <__libc_init_array+0x4c>)
 8000624:	1b76      	subs	r6, r6, r5
 8000626:	f000 f8ff 	bl	8000828 <_init>
 800062a:	10b6      	asrs	r6, r6, #2
 800062c:	bf18      	it	ne
 800062e:	2400      	movne	r4, #0
 8000630:	d006      	beq.n	8000640 <__libc_init_array+0x3c>
 8000632:	3401      	adds	r4, #1
 8000634:	f855 3b04 	ldr.w	r3, [r5], #4
 8000638:	4798      	blx	r3
 800063a:	42a6      	cmp	r6, r4
 800063c:	d1f9      	bne.n	8000632 <__libc_init_array+0x2e>
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	bd70      	pop	{r4, r5, r6, pc}
 8000642:	bf00      	nop
 8000644:	08000840 	.word	0x08000840
 8000648:	08000840 	.word	0x08000840
 800064c:	08000848 	.word	0x08000848
 8000650:	08000840 	.word	0x08000840

08000654 <__register_exitproc>:
 8000654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000658:	4c25      	ldr	r4, [pc, #148]	; (80006f0 <__register_exitproc+0x9c>)
 800065a:	6825      	ldr	r5, [r4, #0]
 800065c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8000660:	4606      	mov	r6, r0
 8000662:	4688      	mov	r8, r1
 8000664:	4692      	mov	sl, r2
 8000666:	4699      	mov	r9, r3
 8000668:	b3cc      	cbz	r4, 80006de <__register_exitproc+0x8a>
 800066a:	6860      	ldr	r0, [r4, #4]
 800066c:	281f      	cmp	r0, #31
 800066e:	dc18      	bgt.n	80006a2 <__register_exitproc+0x4e>
 8000670:	1c43      	adds	r3, r0, #1
 8000672:	b17e      	cbz	r6, 8000694 <__register_exitproc+0x40>
 8000674:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000678:	2101      	movs	r1, #1
 800067a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800067e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8000682:	fa01 f200 	lsl.w	r2, r1, r0
 8000686:	4317      	orrs	r7, r2
 8000688:	2e02      	cmp	r6, #2
 800068a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800068e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000692:	d01e      	beq.n	80006d2 <__register_exitproc+0x7e>
 8000694:	3002      	adds	r0, #2
 8000696:	6063      	str	r3, [r4, #4]
 8000698:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800069c:	2000      	movs	r0, #0
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <__register_exitproc+0xa0>)
 80006a4:	b303      	cbz	r3, 80006e8 <__register_exitproc+0x94>
 80006a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006aa:	f3af 8000 	nop.w
 80006ae:	4604      	mov	r4, r0
 80006b0:	b1d0      	cbz	r0, 80006e8 <__register_exitproc+0x94>
 80006b2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80006b6:	2700      	movs	r7, #0
 80006b8:	e880 0088 	stmia.w	r0, {r3, r7}
 80006bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80006c0:	4638      	mov	r0, r7
 80006c2:	2301      	movs	r3, #1
 80006c4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80006c8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d0e1      	beq.n	8000694 <__register_exitproc+0x40>
 80006d0:	e7d0      	b.n	8000674 <__register_exitproc+0x20>
 80006d2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80006d6:	430a      	orrs	r2, r1
 80006d8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80006dc:	e7da      	b.n	8000694 <__register_exitproc+0x40>
 80006de:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80006e2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80006e6:	e7c0      	b.n	800066a <__register_exitproc+0x16>
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f0:	08000824 	.word	0x08000824
 80006f4:	00000000 	.word	0x00000000

080006f8 <register_fini>:
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <register_fini+0xc>)
 80006fa:	b113      	cbz	r3, 8000702 <register_fini+0xa>
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <register_fini+0x10>)
 80006fe:	f7ff bf6b 	b.w	80005d8 <atexit>
 8000702:	4770      	bx	lr
 8000704:	00000000 	.word	0x00000000
 8000708:	080007e1 	.word	0x080007e1

0800070c <__call_exitprocs>:
 800070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <__call_exitprocs+0xcc>)
 8000712:	b083      	sub	sp, #12
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800071c:	4681      	mov	r9, r0
 800071e:	460e      	mov	r6, r1
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	9b00      	ldr	r3, [sp, #0]
 8000724:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 8000728:	b327      	cbz	r7, 8000774 <__call_exitprocs+0x68>
 800072a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800072e:	687c      	ldr	r4, [r7, #4]
 8000730:	1e65      	subs	r5, r4, #1
 8000732:	d40e      	bmi.n	8000752 <__call_exitprocs+0x46>
 8000734:	3401      	adds	r4, #1
 8000736:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800073a:	f04f 0800 	mov.w	r8, #0
 800073e:	b1e6      	cbz	r6, 800077a <__call_exitprocs+0x6e>
 8000740:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000744:	42b3      	cmp	r3, r6
 8000746:	d018      	beq.n	800077a <__call_exitprocs+0x6e>
 8000748:	3d01      	subs	r5, #1
 800074a:	1c6b      	adds	r3, r5, #1
 800074c:	f1a4 0404 	sub.w	r4, r4, #4
 8000750:	d1f5      	bne.n	800073e <__call_exitprocs+0x32>
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <__call_exitprocs+0xd0>)
 8000754:	b173      	cbz	r3, 8000774 <__call_exitprocs+0x68>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d136      	bne.n	80007ca <__call_exitprocs+0xbe>
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d034      	beq.n	80007cc <__call_exitprocs+0xc0>
 8000762:	4638      	mov	r0, r7
 8000764:	f8ca 3000 	str.w	r3, [sl]
 8000768:	f3af 8000 	nop.w
 800076c:	f8da 7000 	ldr.w	r7, [sl]
 8000770:	2f00      	cmp	r7, #0
 8000772:	d1dc      	bne.n	800072e <__call_exitprocs+0x22>
 8000774:	b003      	add	sp, #12
 8000776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6822      	ldr	r2, [r4, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	42ab      	cmp	r3, r5
 8000782:	bf0c      	ite	eq
 8000784:	607d      	streq	r5, [r7, #4]
 8000786:	f8c4 8000 	strne.w	r8, [r4]
 800078a:	2a00      	cmp	r2, #0
 800078c:	d0dc      	beq.n	8000748 <__call_exitprocs+0x3c>
 800078e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000792:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8000796:	2101      	movs	r1, #1
 8000798:	40a9      	lsls	r1, r5
 800079a:	4219      	tst	r1, r3
 800079c:	d108      	bne.n	80007b0 <__call_exitprocs+0xa4>
 800079e:	4790      	blx	r2
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	455b      	cmp	r3, fp
 80007a4:	d1bd      	bne.n	8000722 <__call_exitprocs+0x16>
 80007a6:	f8da 3000 	ldr.w	r3, [sl]
 80007aa:	42bb      	cmp	r3, r7
 80007ac:	d0cc      	beq.n	8000748 <__call_exitprocs+0x3c>
 80007ae:	e7b8      	b.n	8000722 <__call_exitprocs+0x16>
 80007b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80007b4:	4219      	tst	r1, r3
 80007b6:	d104      	bne.n	80007c2 <__call_exitprocs+0xb6>
 80007b8:	4648      	mov	r0, r9
 80007ba:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80007be:	4790      	blx	r2
 80007c0:	e7ee      	b.n	80007a0 <__call_exitprocs+0x94>
 80007c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80007c6:	4790      	blx	r2
 80007c8:	e7ea      	b.n	80007a0 <__call_exitprocs+0x94>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	46ba      	mov	sl, r7
 80007ce:	461f      	mov	r7, r3
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d1ac      	bne.n	800072e <__call_exitprocs+0x22>
 80007d4:	e7ce      	b.n	8000774 <__call_exitprocs+0x68>
 80007d6:	bf00      	nop
 80007d8:	08000824 	.word	0x08000824
 80007dc:	00000000 	.word	0x00000000

080007e0 <__libc_fini_array>:
 80007e0:	b538      	push	{r3, r4, r5, lr}
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <__libc_fini_array+0x24>)
 80007e4:	4d08      	ldr	r5, [pc, #32]	; (8000808 <__libc_fini_array+0x28>)
 80007e6:	1aed      	subs	r5, r5, r3
 80007e8:	10ac      	asrs	r4, r5, #2
 80007ea:	bf18      	it	ne
 80007ec:	18ed      	addne	r5, r5, r3
 80007ee:	d005      	beq.n	80007fc <__libc_fini_array+0x1c>
 80007f0:	3c01      	subs	r4, #1
 80007f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80007f6:	4798      	blx	r3
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1f9      	bne.n	80007f0 <__libc_fini_array+0x10>
 80007fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000800:	f000 b818 	b.w	8000834 <_fini>
 8000804:	08000848 	.word	0x08000848
 8000808:	0800084c 	.word	0x0800084c

0800080c <_exit>:
 800080c:	e7fe      	b.n	800080c <_exit>
 800080e:	bf00      	nop
 8000810:	30247940 	.word	0x30247940
 8000814:	78021219 	.word	0x78021219
 8000818:	03081800 	.word	0x03081800
 800081c:	0e062146 	.word	0x0e062146
 8000820:	00000043 	.word	0x00000043

08000824 <_global_impure_ptr>:
 8000824:	20000010                                ... 

08000828 <_init>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	bf00      	nop
 800082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082e:	bc08      	pop	{r3}
 8000830:	469e      	mov	lr, r3
 8000832:	4770      	bx	lr

08000834 <_fini>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr
